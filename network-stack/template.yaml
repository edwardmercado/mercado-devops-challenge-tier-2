AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Tier-2: Intermediate Challenge - AWS ECS - VPC Stack

Resources:
  ApperVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ApperVPC

  ApperIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Apper

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ApperVPC
      InternetGatewayId: !Ref ApperIGW

  PublicSubnetAZA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApperVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnetAZA

  PublicSubnetAZB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApperVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.32.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnetAZB

  PrivateSubnetAZA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApperVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 10.0.64.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetAZA

  PrivateSubnetAZB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApperVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.96.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetAZB

  DBSubnetAZA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApperVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 10.0.128.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DBSubnetAZA

  DBSubnetAZB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApperVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.160.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DBSubnetAZB

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApperVPC
      Tags:
        - Key: Name
          Value: PublicRT

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ApperIGW

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZA

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZB

  #RDS Database
  MyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      # DBInstanceIdentifier: myApperDB-emercado
      DBName: mydb
      VPCSecurityGroups: 
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 50
      Engine: MySQL
      EngineVersion: 8.0
      MasterUsername: dbusername
      MasterUserPassword: itsyourday
      MultiAZ: true


  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: emercado - RDS DB - Tier 1
      SubnetIds:
       - !Ref DBSubnetAZA
       - !Ref DBSubnetAZB


  #Security Groups
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ELB-SG"
      GroupDescription: "Load Balancer Security Group"
      VpcId: !Ref ApperVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 1337
        ToPort: 1337
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 1337
        ToPort: 1337
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "APP-SG"
      GroupDescription: "Internal Application Security Group"
      VpcId: !Ref ApperVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: 1337
        ToPort: 1337
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        # SourceSecurityGroupId: !Ref AppSecurityGroup
        CidrIp: 10.0.0.0/16        
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        CidrIp: 10.0.0.0/16
      - IpProtocol: -1
        CidrIp: 10.0.0.0/16
      - IpProtocol: -1
        SourcePrefixListId: pl-6fa54006
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: 1337
        ToPort: 1337
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        # SourceSecurityGroupId: !Ref AppSecurityGroup
        CidrIp: 10.0.0.0/16        
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        # SourceSecurityGroupId: !Ref AppSecurityGroup
        CidrIp: 10.0.0.0/16
      - IpProtocol: -1
        CidrIp: 10.0.0.0/16
      - IpProtocol: -1
        DestinationPrefixListId: pl-6fa54006

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "DB-SG"
      GroupDescription: "Internal DB Security Group"
      VpcId: !Ref ApperVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref AppSecurityGroup
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref AppSecurityGroup
      - IpProtocol: -1
        SourceSecurityGroupId: !Ref AppSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref AppSecurityGroup
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref AppSecurityGroup
      - IpProtocol: -1
        SourceSecurityGroupId: !Ref AppSecurityGroup

  ECRSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ECR-SG"
      GroupDescription: "ECR VPC Endpoint Security Group"
      VpcId: !Ref ApperVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref AppSecurityGroup
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        # SourceSecurityGroupId: !Ref AppSecurityGroup
        CidrIp: 10.0.0.0/16        
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        # SourceSecurityGroupId: !Ref AppSecurityGroup
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.0.96.0/19
      - IpProtocol: -1
        CidrIp: 10.0.0.0/16
      - IpProtocol: -1
        SourcePrefixListId: "pl-6fa54006"
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        # SourceSecurityGroupId: !Ref AppSecurityGroup
        CidrIp: 10.0.0.0/16        
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        # SourceSecurityGroupId: !Ref AppSecurityGroup
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.0.96.0/19
      - IpProtocol: -1
        CidrIp: 10.0.0.0/16
      - IpProtocol: -1
        DestinationPrefixListId: pl-6fa54006

  #ECR VPC Endpoint - NATGatewayLimitExceeded
  ECREndpointDKR:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      VpcId: !Ref ApperVPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetAZA
        - !Ref PrivateSubnetAZB
      ServiceName: com.amazonaws.ap-southeast-1.ecr.dkr
      SecurityGroupIds: 
        - !Ref ECRSecurityGroup

  LogsEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      VpcId: !Ref ApperVPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetAZA
        - !Ref PrivateSubnetAZB
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      SecurityGroupIds: 
        - !Ref ECRSecurityGroup

  SSMEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      VpcId: !Ref ApperVPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetAZA
        - !Ref PrivateSubnetAZB
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      SecurityGroupIds: 
        - !Ref ECRSecurityGroup

  ECREndpointAPI:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      VpcId: !Ref ApperVPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetAZA
        - !Ref PrivateSubnetAZB
      ServiceName: com.amazonaws.ap-southeast-1.ecr.api
      SecurityGroupIds: 
        - !Ref ECRSecurityGroup

  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:*'
            Resource:
              - '*'
      RouteTableIds:
        - !Ref PrivateRouteTableAZA
        - !Ref PrivateRouteTableAZB
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref ApperVPC

  STSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref ECRSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sts
      SubnetIds:
        - !Ref PrivateSubnetAZA
        - !Ref PrivateSubnetAZB
      VpcEndpointType: Interface
      VpcId: !Ref ApperVPC
  
  KMSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref ECRSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.kms
      SubnetIds:
        - !Ref PrivateSubnetAZA
        - !Ref PrivateSubnetAZB
      VpcEndpointType: Interface
      VpcId: !Ref ApperVPC

  
  PrivateRouteTableAZA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApperVPC
      Tags:
        - Key: Name
          Value: PrivateRTAZA

  PrivateRouteTableAZB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApperVPC
      Tags:
        - Key: Name
          Value: PrivateRTAZB
  
  PrivateSubnetAZARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZA
      SubnetId: !Ref PrivateSubnetAZA

  PrivateSubnetAZBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZB
      SubnetId: !Ref PrivateSubnetAZB

  
  ##NAT GATEWAY###
  

Outputs:
  VPCID:
    Description: A reference to the created VPC
    Value: !Ref ApperVPC
    Export:
      Name: VPCId-tier2

  PublicSubnetAZA:
    Description: A reference to the public subnet
    Value: !Ref PublicSubnetAZA
    Export:
      Name: PublicSubnetAZA-tier2

  PublicSubnetAZB:
    Description: A reference to the public subnet in AZ B
    Value: !Ref PublicSubnetAZB
    Export:
      Name: PublicSubnetAZB-tier2

  PrivateSubnetAZA:
    Description: A reference to the private subnet in AZ A
    Value: !Ref PrivateSubnetAZA
    Export:
      Name: PrivateSubnetAZA-tier2

  PrivateSubnetAZB:
    Description: A reference to the private subnet in AZ B
    Value: !Ref PrivateSubnetAZB
    Export:
      Name: PrivateSubnetAZB-tier2

  DatabaseSubnetAZA:
    Description: A reference to the database subnet in AZ A
    Value: !Ref DBSubnetAZA
    Export:
      Name: DatabaseSubnetAZA-tier2

  DatabaseSubnetAZB:
    Description: A reference to the database subnet in AZ B
    Value: !Ref DBSubnetAZB
    Export:
      Name: DatabaseSubnetAZB-tier2

  LoadBalancerSecurityGroup:
    Description: A reference to the Load Balancer Security Group
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: LoadBalancerSecurityGroup-tier2

  AppSecurityGroup:
    Description: A reference to the Application Security Group
    Value: !Ref AppSecurityGroup
    Export:
      Name: AppSecurityGroup-tier2

  DBSecurityGroup:
    Description: A reference to the Application Security Group
    Value: !Ref DBSecurityGroup
    Export:
      Name: DBSecurityGroup-tier2

  MyDB:
    Description: A reference to the Database instance
    Value: !Ref MyDB
    Export:
      Name: MyDB-tier2
  
  MyDBPort:
    Description: A reference to the Database instance
    Value: !GetAtt MyDB.Endpoint.Port
    Export:
      Name: MyDBPort-tier2

  MyDBAddress:
    Description: A reference to the Database instance
    Value: !GetAtt MyDB.Endpoint.Address
    Export:
      Name: MyDBAddress-tier2