version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: latest
    commands:
      - echo Entered the installing phase...
    finally:
      - echo This always runs even if the update or install command fails 
  pre_build:
    commands:
      - echo Initialize docker deamon
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&
      -  timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
    finally: 
      - echo This always runs even if the pre build phase commands fails
  build:
    commands:
      - echo Entered the build phase...
      - echo Build started on `date`
      - echo Building the Docker image...
      - cd express-miniapp
      # Build the .env values
      - printf "HOST=$DB_ADDRESS\nUSERNAME=dbusername\nPASSWORD=itsyourday\nDATABASE=mydb" > .env
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      
    finally: 
      - echo This always runs even if the build phase commands fails
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Entered the post_build phase...
      - echo Pushing the Docker image...
      - docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      

# artifacts:
#   files:
#     - package.json
#     - Procfile
#     - src/index.js
#     - src/middlewares.js
#     - node_modules/**/*
#     - .eslintrc.js
#     - package-lock.json
#     - .env
#   name: express-miniapp
#   base-directory: express-miniapp

cache:
  paths:
    - node_modules/**/*